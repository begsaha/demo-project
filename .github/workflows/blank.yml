# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!
      #create the path
      - run: mkdir -p path/to/artifact

      - run: echo hello > path/to/artifact/myartifact.txt
      # Creates a  docker image
#      - uses: mr-smithers-excellent/docker-build-push@v6
#        name: Build & push Docker image
#        with:
#          image: begsaha/demo-project
#          tags: v1, latest
#          registry: docker.io
#          dockerfile: Dockerfile
#          username: ${{ secrets.DOCKER_USERNAME }}
#          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v3
        with:
          name: myartifact
          path: path/to/artifact/myartifact.txt
#          retention-days: 5
  job_1:
   name: Download artifact
   needs: build
   runs-on: ubuntu-latest
   steps:
     - name: Download a single artifact
       uses: actions/download-artifact@v2
       with:
         name: myartifact
# ==================================================
#on:
#  push:
#jobs:
#  build:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#        with:
#          fetch-depth: 0  ##
#      - name: get file changes
#        run: |
#          git diff --name-only ${{ github.event.before }} ${{ github.event.after }}
#          git log --pretty=oneline "$BEFORE_REF...$AFTER_REF" | wc -l.
     - name: log newly committed messages
       env:
         BEFORE_REF: ${{ github.event.before }}
         AFTER_REF: ${{ github.event.after }}
       run: git log --pretty=format:%s "$BEFORE_REF...$AFTER_REF"