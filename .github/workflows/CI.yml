name: CI

on:
  push:
    branches: [ "main" ]
    tag:
      -  v1.*
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:


jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository instead of github context dump
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!
      #create the path
      - run: mkdir -p path/to/artifact
      - run: echo hello > path/to/artifact/myartifact.txt
      #set up the java
      - uses: actions/setup-java@v3
        with:
          distribution: 'liberica'
          java-version: '17'
      #Build info:
      - name: Build & push Docker image
        run: |
          GIT_SHORT_SHA=$(git rev-parse --short HEAD)
          IMAGE_TAG="$(date -u +'%Y%m%d-%H%M%S')-${GIT_SHORT_SHA}"
          IMAGE_NAME="demo-project:$IMAGE_TAG"
          IMAGE_LABELS="GCX_GIT_REPO=${GITHUB_REPOSITORY} GCX_GIT_BRANCH=${GITHUB_REF} GCX_GIT_COMMIT=${GITHUB_SHA} GCX_RUN_ID=${GITHUB_RUN_ID} GCX_RUN_NUMBER=${GITHUB_RUN_NUMBER}"
          echo "IMAGE_TAG: ${IMAGE_TAG}"
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV
          echo "IMAGE_NAME: ${IMAGE_NAME}"
          echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_ENV
          echo "IMAGE_LABELS: ${IMAGE_LABELS}"
          echo "IMAGE_LABELS=${IMAGE_LABELS}" >> $GITHUB_ENV

      # Creates a  docker image
      - uses: mr-smithers-excellent/docker-build-push@v6

        with:
          image: begsaha/${IMAGE_NAME}
          tags: v1
          registry: docker.io
          dockerfile: Dockerfile
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

#      - name: Build and push docker image to dockerhub
#        env:
#          REGISTRY_USER: ${{ secrets.DOCKER_USERNAME }}
#          REGISTRY_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
#          GITHUB_ACTOR: ${{ github.actor }}
#          PIPELINE: CD
#        working-directory: ./demo-project
#        run: ./gradlew :src:bootBuildImage --no-daemon --publishName demo-project

      - name: log newly committed messages
        run: |
         git diff --name-only ${{ github.event.before }} ${{ github.event.after }}
#        env:
#          BEFORE_REF: ${{ github.event.before }}
#          AFTER_REF: ${{ github.event.after }}
#        run: git log --pretty=format:%s "$BEFORE_REF...$AFTER_REF"


#      - name: Upload Artifact
#        uses: actions/upload-artifact@v2
#        with:
#          name: myartifact
#          path: path/to/artifact/myartifact.txt
##          retention-days: 5
#      - name: Create a Release
#        if: github.event_name == 'push' && github.reg == 'refs/heads/main'
#        id: create_release
#        uses: actions/create-release@v1
#        env:
#          GITHUB_TOCKEN: ${{secrets.CUSTOM_TOKEN}}
#        with:
#          tag_name: v1.0.0

      - name: Release
        uses: softprops/action-gh-release@91409e712cf565ce9eff10c87a8d1b11b81757ae
        if: startsWith(github.ref, 'refs/tags/')
        with:
          # Identify if this is a pre release by checking if the tag name contains -rc, -b, -a
          prerelease: ${{ contains(github.ref, '-rc') || contains(github.ref, '-b') || contains(github.ref, '-a') }}
          files: artifacts/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          release_name: Release ${{github.ref}}
#          draft: false
#          prerelease: false
#
#      - name: Upload Release Asset
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }}
#          asset_path: ./build/libs/demo-project-0.0.1-SNAPSHOT.jar
#          asset_name: demo-project-0.0.1-SNAPSHOT.jar
#          asset_content_type: application/java-archive


#  job_1:
#   name: Download artifact
#   needs: build
#   runs-on: ubuntu-latest
#   steps:
#     - name: Download a single artifact
#       uses: actions/download-artifact@v2
#       with:
#         name: myartifact
#         path: C:\Users\saha\Downloads\demo-project

