name: CI

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  push:
    branches: [ "main" ]
    tags:
      -  v1.*
  pull_request:
    branches: [ "main" ]




jobs:

  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository instead of github context dump
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

#      # Runs a single command using the runners shell
#      - name: Run a one-line script
#        run: echo Hello, world!
#      #create the path
#      - run: mkdir -p path/to/artifact
#      - run: echo hello > path/to/artifact/myartifact.txt
      - name: Run gradle command
        uses: gradle/gradle-build-action@v2


      #set up the java
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Make gradlew executable
        run: chmod +x ./gradlew
      #Build

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@ccb4328a959376b642e027874838f60f8e596de3
      - name: Build with Gradle
        uses: gradle/gradle-build-action@749f47bda3e44aa060e82d7b3ef7e40d953bd629
        with:
          arguments: build --scan

      # Upload build reports
      - name: Upload build reports
        uses: actions/upload-artifact@v3
        with:
          name: build-reports
          path: build/reports/

#      #Build info:
#      - name: Extract_Docker_image_info
#        id: image1
#        run: |
#          GIT_SHORT_SHA=$(git rev-parse --short HEAD)
#          IMAGE_TAG="$(date -u +'%Y%m%d-%H%M%S')-${GIT_SHORT_SHA}"
#          IMAGE_NAME="demo-project:${IMAGE_TAG}"
#          IMAGE_LABELS="GCX_GIT_REPO=${GITHUB_REPOSITORY} GCX_GIT_BRANCH=${GITHUB_REF} GCX_GIT_COMMIT=${GITHUB_SHA} GCX_RUN_ID=${GITHUB_RUN_ID} GCX_RUN_NUMBER=${GITHUB_RUN_NUMBER}"
#          echo "IMAGE_TAG: ${IMAGE_TAG}"
#          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV
#          echo "IMAGE_NAME: ${IMAGE_NAME}"
#          echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_ENV
#          echo "IMAGE_LABELS: ${IMAGE_LABELS}"
#          echo "IMAGE_LABELS=${IMAGE_LABELS}" >> $GITHUB_ENV
#
#
#      - name: Build and push docker image
#        uses: docker/build-push-action@v2
#        with:
#          repository: begsaha/${IMAGE_NAME}
#          username: ${{ secrets.DOCKER_USERNAME }}
#          password: ${{ secrets.DOCKER_PASSWORD }}












#
#      - name: log newly committed messages
#        run: |
#         git diff --name-only ${{ github.event.before }} ${{ github.event.after }}


#        env:
#          BEFORE_REF: ${{ github.event.before }}
#          AFTER_REF: ${{ github.event.after }}
#        run: git log --pretty=format:%s "$BEFORE_REF...$AFTER_REF"



#
#      - name: Release
#        uses: softprops/action-gh-release@91409e712cf565ce9eff10c87a8d1b11b81757ae
#        if: startsWith(github.ref, 'refs/tags/')
#        with:
#          # Identify if this is a pre release by checking if the tag name contains -rc, -b, -a
#          prerelease: ${{ contains(github.ref, '-rc') || contains(github.ref, '-b') || contains(github.ref, '-a') }}
#          files: artifacts/*
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}







  release-project:
   name: Download artifact
   needs: build
   runs-on: ubuntu-latest
   steps:
     - name: Download demo project
       uses: actions/download-artifact@v2
       with:
         name: build-reports

     - name: Archive site content
       uses: thedoctor0/zip-release@0.7.1
       with:
         filename: demo-project.zip
     - uses: ColinPitrat/update-release@v1.0.1
       with:
         token: ${{ secrets.GITHUB_TOKEN }}
         files: ./demo-project.zip

#     - name: create Github release
#       id: create-release
#       uses: actions/create-release@v1
#       env:
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
#       with:
#         tag_name: sudip
#         release_name: Release #v":$(date -u +'%Y%m%d-%H%M%S')"

     - name: Upload Release Asset
       uses: actions/upload-release-asset@v1
       env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
       with:
#         upload_url: ${{ steps.create-release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
         asset_path: ./demo-project.zip
         asset_name: demo-project-v "$(date -u +'%Y%m%d-%H%M%S')"
         asset_content_type: application/zip

